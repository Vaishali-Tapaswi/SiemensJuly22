Lab 6 - Write client to connect and download output of lambda

Lab 5 - Accept bucket name from user and create a new bucket 
            1. Error for permission
            2. change user permissions to give s3fullcontrol
            3. Run 
            
Lab 4 - Create new folder (Demo11_22)
            1. Check AWS SDK Docs
            2. Check AWS go examples
            Copy ListBuckets code and Run.

Lab 3 - AWS Cli
            install AWS CLI
            AWS COnsole -> IAM -> Create user -> Programmatic Access -> s3readonlyaccess -> download csv file
            cmd>aws s3 ls 
                        See error
            cmd>aws confiure
                        give auth details 
                        default region -> us-east-1
                        default output format -> none
            cmd>aws s3 ls 
                      list of buckets
            
FInal Lab1.go
            package main

            import (
                        "fmt"
                        "io/ioutil"
                        "log"
                        "net/http"
                        "strconv"
                        "encoding/json"
            )
            type Emp struct {
                Empno int `json:"empno"`
                        Ename string `json:"ename"`
                        Salary int `json:"salary"`
            }
            // Create emp array (or slice )
            func loadPage(title string) (*[]byte, error) {
                        filename := "static/" + title + ".html"
                        fmt.Println(filename)
                        body, err := ioutil.ReadFile(filename)
                        if err != nil {
                                    //fmt.Println("ReadFile error " , err)
                                    return nil, err
                        }
                        return &body, nil
                        }
            func viewHandler(w http.ResponseWriter, r *http.Request) {
                                    title := r.URL.Path[len("/"):]
                                    fmt.Println("in viewHandler " , title)
                                    body, _ := loadPage(title)
                                    fmt.Fprintln(w, string(*body))
                                    }
            func savehandler(w http.ResponseWriter, r *http.Request) {
                                                emp :=Emp{}
                                                emp.Empno,_ = strconv.Atoi(r.FormValue("empno"))
                                                emp.Ename =   r.FormValue("ename")
                                                emp.Salary, _ = strconv.Atoi( r.FormValue("salary"))
                                                fmt.Println("insertemp - savehandler invoked with ", emp)

                                                body, _ := loadPage("index")
                                                fmt.Fprintln(w, string(*body))
                                                // add emp to array and display in fmt.Println
                                                emparr = append(emparr, emp)
                                                fmt.Println("EmpArray " , emparr)

                                                }
            func listhandler(w http.ResponseWriter, r *http.Request) {
                                                bytearr,_ := json.Marshal(emparr)
                                                fmt.Println( string(bytearr))
                                                fmt.Fprintln(w, string(bytearr))
                                                }
            var emparr []Emp
            func main() {
                        emparr = make([]Emp, 0)			
                        http.HandleFunc("/", viewHandler)
                        http.HandleFunc("/insertemp", savehandler)
                        http.HandleFunc("/list", listhandler)

                        fmt.Println("Sever starting on port 8080.....")
                        log.Fatal(http.ListenAndServe(":8080", nil))
            }

Lab3 - Modify Lab1.go to include 
            type Emp struct {
                empno int
                ename string
                salary int
            }
            func savehandler(w http.ResponseWriter, r *http.Request) {
                    emp :=Emp{}
                    emp.empno,_ = strconv.Atoi(r.FormValue("empno"))
                    emp.ename =   r.FormValue("ename")
                    emp.salary, _ = strconv.Atoi( r.FormValue("salary"))
                    fmt.Println("insertemp - savehandler invoked with ", emp)
                    body, _ := loadPage("index")
                    fmt.Fprintln(w, string(*body))
                    // add emp to array and display in fmt.Println

                    }
            func main() {

                http.HandleFunc("/", viewHandler)
                http.HandleFunc("/insertemp", savehandler)

                fmt.Println("Sever starting on port 8080.....")
                log.Fatal(http.ListenAndServe(":8080", nil))
            }

        Create slice / array of emp
        Add emp to array and print in fmt.Println
        Modify page1.html => form action ="insertemp"

Lab2 - Create a new folder Demo10_22
    Create Lab1 - 
          package main

          import (
            "fmt"
            "io/ioutil"
            "log"
            "net/http"
          )
          func loadPage(title string) (*[]byte, error) {
            filename := "static/" + title + ".html"
            fmt.Println(filename)
            body, err := ioutil.ReadFile(filename)
            if err != nil {
              fmt.Println("ReadFile error " , err)
              return nil, err
            }
            return &body, nil
            }
          func viewHandler(w http.ResponseWriter, r *http.Request) {
              title := r.URL.Path[len("/"):]
              fmt.Println("in viewHandler " , title)
              body, _ := loadPage(title)
              fmt.Fprintln(w, string(*body))
              }
          func main() {

            http.HandleFunc("/", viewHandler)

            fmt.Println("Sever starting on port 8080.....")
            log.Fatal(http.ListenAndServe(":8080", nil))
          }

  Create static folder and index, page1, page2 .html files
    index.html
           <html>

            <body>
              <h1>Index Page</h1>
              <h2><a href="page1">Input Emp</a></h2>
              <h2><a href="page2">Page2</a></h2>
            </body>
          </html>
    Page1.html
        <html>

          <body>
              <h1>Page One </h1>
              <form action="" method="get">
                  Empno : <input type="number" name="empno" /><br/>
                  Ename : <input type="text" name="ename" /><br/>
                  Salary: <input type="number" name="salary" /><br/>
                  <input type="submit"/>
              </form>
          </body>
       </html>
Lab 1 - 
  https://martinfowler.com/articles/microservices.html
