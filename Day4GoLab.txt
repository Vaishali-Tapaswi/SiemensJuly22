Lab 3 - testing (Demo9_21 folder
        create Lab1.go 
            package main

            import (
                "fmt"
            )
            func add(x, y int) int{
                return x+y
            }

            func main(){
                x := add(30,50)
                fmt.Println("X = ", x)
            }
            
       create Lab1_test.go
            package main
            import "testing"
            func TestAdd(t *testing.T) {
                got := add(10,40)
                if got != 500 {
                    t.Errorf("add(10,40) = %d; want 50", got)
                }
            }
        cmd>go test Lab1_test.go
            watch error
        cmd>go test Lab1_test.go Lab1.go
            Success -> ok
        Modify add method or test method
            check fail cases
            
        Write one more method divide
        
            func divide(x, y string) int{
                no1, _ := strconv.Atoi(x)
                no2, _ := strconv.Atoi(y)
                return no1/no2
            }
            
       Write test function for testing divide -> x = divide("300","50"), x = divide("x","50"), x = divide("50","0")
        

Lab2 - Lab1.go
    package main

    import (
      "fmt"
      "database/sql"
      _ "github.com/go-sql-driver/mysql"
    )

    func main() {
      db, err := sql.Open("mysql", "admin:MyPassword@tcp(db.host:3306)/demo")
      if err != nil {
        fmt.Println("Error for Open  = ", err)
      } else {
        fmt.Println("Got Connection", db)
      }
      rows, err1 := db.Query("insert into emp values (22,'BBB',22000)")
      if err1 != nil {
        fmt.Println("Error for insert  = ", err1)
      } else {
        fmt.Println("Inserted ", rows)
      }

    }
    /*
    1. Create - Insert
    2. Delete 
    3. Update 
    4. Retrive - Show all records 
    */
    //create table emp (empno numeric(2) primary key, ename varchar(20), salary numeric(9))


Lab 1 - 
  import _ "github.com/go-sql-driver/mysqlâ€œ
  db, err := sql.Open("mysql","username:password@tcp(hostname:port)/dbname")
  rows, err1 := db.Query("insert into emp values (11,'AAA',11000)")

  Create a module 
  and download depenencies
