Lab 7 - Lab3 
        https://transform.tools/json-to-go
        Write code to accept a number
        send request to https://reqres.in/api/users/number
        show name and email address of user
        
Lab6 - JSON Conversion
        package main

        import (
                "encoding/json"
                "fmt"
        )

        type Emp struct {
                Empno int `json:"employeenumber"`
                Ename string `json:"employeename"`
        }

        func main() {
                e1 := Emp{10, "SSimple"}
                convertedbarr, err := json.Marshal(e1)
                if err != nil {
                        fmt.Println("Error ", err)
                } else {
                        fmt.Println("Converted String ", string(convertedbarr))
                }
        }
       Write code for unmarshal

Lab 5  (Demo5_20 folder) ->Lab1
        https://golang.org/doc/tutorial/create-module
        1. Create a folder demo5
                create Lab1.go
                        package main

                        import "fmt"
                        import "github.com/magiconair/properties"

                        func main() {
                                fmt.Println("Hello, World")
                                p := properties.MustLoadFile("simple.properties", properties.UTF8)
                                if port, ok := p.Get("port"); ok {
                                        fmt.Println(port)
                                }
                        }

                create simple.properties
                        port=8085

        2. Watch messages and create module	
                go run Lab1.go
                        Watch error -> go help modules ->https://golang.org/doc/tutorial/create-module

                Create a module 
                        go mod init firstmod
                                list the files , read go.mod
                        go mod tidy
                                list and read files , go.sum
                        go run Lab1.go	

---------------
Lab 4 - Http Server -> index page with page1 and page2 as hlinks
        package main

        import (
                "fmt"
                "io"
                "log"
                "net/http"
        )
       func main() {
                indexPageHandler := func(w http.ResponseWriter, req *http.Request) {
                        io.WriteString(w, "<h1>Index Page</h1>")
                }
                page1Handler := func(w http.ResponseWriter, req *http.Request) {
                        io.WriteString(w, "<h1>Page One</h1>")
                }
                http.HandleFunc("/", indexPageHandler)
                http.HandleFunc("/page1", page1Handler)
                fmt.Println("Sever starting on port 8080.....")
                log.Fatal(http.ListenAndServe(":8080", nil))
        }

Lab 3 - 
        package main

        import(
                "fmt"
                "net/http"
                "io/ioutil"
        )

        func main(){
                //func (c *Client) Get(url string) (resp *Response, err error)
                client := http.Client{}
                resp, err := client.Get("https://reqres.in/api/users/2")
                fmt.Println("resp = ", resp)
                fmt.Println("err  =  ", err)
                fmt.Println("RespBody ", resp.Body)
                content, err := ioutil.ReadAll(resp.Body)
                fmt.Println("Content = ", string(content))
                fmt.Println("err  =  ", err)
         }
        
Lab 2- Create an interface Plot with method Display
        Create two structures Point2d(x,y) and Point3d(x,y,z)
        Implement Plot for both Point2d and Point3d so that we can invoke Display method for both the structures
        Display method should just have print statement with co-ordinates

Lab 1 - Interface
    package main

    import "fmt"
    import "strconv"

    type Emp struct {
      empno int
      ename string
    }
    func (e Emp) Convert() string {
      str :="Emp Details[Empno = "+ strconv.Itoa(e.empno)+ " , Name = " + e.ename +"]" ;
      return str
    }

    type Tostr interface {
      Convert() string 
    }


    func main(){
      var a Tostr;
      e:= Emp{10,"aaa"}
      a = e
      fmt.Println(e.Convert())
      fmt.Println(a.Convert())
    }


