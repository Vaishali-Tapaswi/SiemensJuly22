Lab 7 - 
	Error - package my is not in GOROOT (C:\Program Files\Go\src\my)
	-> go version > 1.18 (should use go.mod)
	set GO111MODULE=off
	Run and check error
		cannot find package "my" in any of:
			C:\Program Files\Go\src\my (from $GOROOT)
			C:\Users\admin\go\src\my (from $GOPATH)
	create a folder c:\simensGo\src\my and copy lab6Helper.go in same
	SET GOPATH=c:\simensGo
		-> found package my
		.\Lab6.go:14:5: undefined: my.hello
		(as h is small - private)
	Modify method names to start with capital alphabet and test 
	
Lab 6 - Working with external helpers
	Lab6.go
		package main

		import (
			"fmt"

		)

		func main(){
			x,y:=0,0
			fmt.Print("Enter Number 1 : ")
			fmt.Scanln(&x)
			fmt.Print("Enter Number 2 : ")
			fmt.Scanln(&y)
			hello()
			sum :=add(x,y)
			sub :=sub(x,y)
			fmt.Println("Sum = " , sum)
			fmt.Println("Subtraction = " , sub)
		}
	Lab6Helper.go
		package main
		import "fmt"
		func hello(){
			fmt.Println("Hello Function invoked ..")
		}

		func add(x int,y int)  int  {
			fmt.Println("Add invoked with " , x, y)
			return x+y
		}

		func sub(x int,y int)  int  {
			fmt.Println("Sub invoked with " , x, y)
			return x-y
		}

	cmd>go run Lab6.go 
		Observe error
	cmd>go run Lab6.go Lab6Helper.go
		Success
	Modify Lab6Helper.go to change package name to my
	Modify Lab6.go to invoke my package
		Observe error
		
Lab 5 - Accept a number on command line (os) -> say count
	declare array (marks []int)
	accept numbers from user and keep it in array
	Sort(sort) and print array
	sum := 0
	for i := 0; i < 10; i++ {
		sum += i
	}
	fmt.Println(sum)
	
	
Lab 4 - multiple returns
		package main

		import (
			"fmt"
		)

		func main(){
			x,y:=0,0
			fmt.Print("Enter Number 1 : ")
			fmt.Scanln(&x)
			fmt.Print("ENter Number 2 : ")
			fmt.Scanln(&y)
			hello()
		/*	sum :=add(x,y)
			sub :=sub(x,y)
			fmt.Println("Sum = " , sum)
			fmt.Println("Subtraction = " , sub)
		*/
			sum, sub := calc(x,y)
			fmt.Println("Sum = " , sum)
			fmt.Println("Subtraction = " , sub)
		}
		func hello(){
			fmt.Println("Hello Function invoked ..")
		}

		func calc(x int,y int)  (int,int)  {
			fmt.Println("Calc invoked with " , x, y)
			return x+y, x-y
		}
		/*
		func add(x int,y int)  int  {
			fmt.Println("Add invoked with " , x, y)
			return x+y
		}

		func sub(x int,y int)  int  {
			fmt.Println("Sub invoked with " , x, y)
			return x-y
		}
		*/
---------------
Lab 3 - 
	Accept Name and Age from user and print the details
	if Age > 18 print -> Major
		else print Minor
	-------> If statement and if expression
		func main(){
			name := "abc"
			fmt.Println("Name before scanln is " , name)
			fmt.Print("Enter your Name : ")
		/*	count, _ := fmt.Scanln(&name)
			fmt.Println("Count  = " , count)
		*/
			fmt.Scanln(&name)
			fmt.Println("Name after scanln is " , name)
		}

-------------------

Lab 2 - Write Lab2.go
        create a variable & Print 
                	x := 10
	                fmt.Println("Value of x = ",x)
           Write x:=20 again and see error
        Read OS documentation and print hostname 
		/*	hostname, err := os.Hostname()
			if err == nil {
				fmt.Println("Host Name = ", hostname)
			} else {
				fmt.Println("Error ", err)
			}
		*/
			hostname, _ := os.Hostname()
			fmt.Println("Host Name = ", hostname)

		import "fmt"
		import "os"
		Or
		import (
			"fmt"
			"os"
		)
-------------------
Lab - Download/Install Go + Visual Studio Code
Lab1 - Create a folder ../Demo1_18
        Create a Lab1.go
        package main

        import "fmt"

        func main() {
          fmt.Println("Hello World!!")
        }

    cmd in same dir>go build Lab1.go
        -> observe created exe and run (by directly double clicking or typing Lab1.exe on cmd prompt
    cmd>go run Lab1.go
    cmd>go fmt Lab1.go (Indentations etc)
    
    Modify code to have enter after main() and before { -> observe error
 
    Modify package name -> check error
    Modify function name main -> check error / messages
